// https://www.hackerrank.com/challenges/richie-rich/problem

#include <bits/stdc++.h>

using namespace std;

vector<string> split_string(string);

// Complete the highestValuePalindrome function below.
string highestValuePalindrome(string s, int n, int k) {
	
	string result = "";
	
	if (n == 0) {
		result = "-1";
	} else if (n == 1) {
		if (k > 0) {
			result = "9";
		} else {
			result = s;
		}
	} else {
		
		int k_min = 0;
		int i_left = 0;
		int i_right = n - 1;
		string s_changed = s;
		while (i_left < i_right) {

			if (s[i_left] != s[i_right]) {
				
				if (s[i_left] < s[i_right]) {
					s_changed[i_left] = s[i_right];
				} else {
					s_changed[i_right] = s[i_left];
				}
				
				k_min++;
			}
			
			i_left++;
			i_right--;
			
		}
		
		cout << "Minimumally changed string: " << s_changed << endl;
		cout << "Minimum number of changes: " << k_min << endl;
		
		if (k_min > k) {
			result = "-1";
		} else if (k_min == k) {
			result = s_changed;
		} else {
			int k_remain = k - k_min;
			i_left = 0;
			i_right = n - 1;
			while (i_left <= i_right && k_remain > 0) {

				if (s_changed[i_left] != '9') {
					
					if (i_left == i_right) {
						if (k_remain >= 1) {
							k_remain--;
							s_changed[i_left] = '9';
						}
					} else if (s_changed[i_left] == s[i_left] && 
							s_changed[i_right] == s[i_right] && 
							k_remain >= 2) {
						k_remain -= 2;
						s_changed[i_left] = '9';
						s_changed[i_right] = '9';
					} else if ((s_changed[i_left] != s[i_left] || 
							s_changed[i_right] != s[i_right]) && 
							k_remain >= 1) {
						k_remain--;
						s_changed[i_left] = '9';
						s_changed[i_right] = '9';
					}
	
				}
				
				i_left++;
				i_right--;
				
			}
			
			
			
			result = s_changed;
		}
		
	}
	
	return result;
	
}

int main()
{
    ofstream fout(getenv("OUTPUT_PATH"));

    string nk_temp;
    getline(cin, nk_temp);

    vector<string> nk = split_string(nk_temp);

    int n = stoi(nk[0]);

    int k = stoi(nk[1]);

    string s;
    getline(cin, s);

    string result = highestValuePalindrome(s, n, k);

    fout << result << "\n";

    fout.close();

    return 0;
}

vector<string> split_string(string input_string) {
    string::iterator new_end = unique(input_string.begin(), input_string.end(), [] (const char &x, const char &y) {
        return x == y and x == ' ';
    });

    input_string.erase(new_end, input_string.end());

    while (input_string[input_string.length() - 1] == ' ') {
        input_string.pop_back();
    }

    vector<string> splits;
    char delimiter = ' ';

    size_t i = 0;
    size_t pos = input_string.find(delimiter);

    while (pos != string::npos) {
        splits.push_back(input_string.substr(i, pos - i));

        i = pos + 1;
        pos = input_string.find(delimiter, i);
    }

    splits.push_back(input_string.substr(i, min(pos, input_string.length()) - i + 1));

    return splits;
}
