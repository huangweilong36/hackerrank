// https://www.hackerrank.com/challenges/sherlock-and-valid-string/problem

#include <bits/stdc++.h>

using namespace std;

// Complete the isValid function below.
string isValid(string s) {
	
	// SORT THE INPUT STRING
	sort(s.begin(), s.end());
	
	// MAKE THE INPUT STRING UNIQUE
	string s_unique = s;
	string::iterator it = unique(s_unique.begin(), s_unique.end());
	s_unique.resize(distance(s_unique.begin(), it));
	
	// COUNT THE NUMBER OF INSTANCES OF EACH CHARACTER
	vector<int> charCounts;
	for (int i = 0; i < s_unique.size(); i++) {
		int currCount = 0;
		for (int j = 0; j < s.size(); j++) {
			if (s_unique[i] == s[j]) {
				currCount++;
			}
		}
		charCounts.push_back(currCount);
	}
	
	vector<int> uniqueCharCounts = charCounts; 
	sort(uniqueCharCounts.begin(), uniqueCharCounts.end());
	vector<int>::iterator it1 = unique(uniqueCharCounts.begin(), uniqueCharCounts.end());
	uniqueCharCounts.resize(distance(uniqueCharCounts.begin(), it1));
	

	string result;
	if (uniqueCharCounts.size() > 2) {
		result = "NO";
	} else if (uniqueCharCounts.size() == 1) {
		result = "YES";
	} else {
		
		
		sort(charCounts.begin(), charCounts.end());
		int refCount = charCounts[0];
		int totalDiff = 0;
		int maxDiff = 0;
		for (int i = 1; i < charCounts.size(); i++) {
			if (charCounts[i] != refCount) {
				totalDiff++;
			}
			if (abs(charCounts[i] - refCount) > maxDiff) {
				maxDiff = abs(charCounts[i] - refCount);
			}
		}
		
		if (maxDiff <= 1 && ((totalDiff == 1) || (totalDiff == (charCounts.size()-1)))) {
			result = "YES";
		} else {
			result = "NO";
		}
		
	}
			
	return result;

}

int main()
{
    ofstream fout(getenv("OUTPUT_PATH"));

    string s;
    getline(cin, s);

    string result = isValid(s);

    fout << result << "\n";

    fout.close();

    return 0;
}
