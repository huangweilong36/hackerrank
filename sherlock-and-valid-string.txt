// https://www.hackerrank.com/challenges/sherlock-and-valid-string/problem

#include <bits/stdc++.h>

using namespace std;

// Complete the isValid function below.
string isValid(string s) {
	
	// SORT THE INPUT STRING
	sort(s.begin(), s.end());
	cout << "Sorted string: " << s << endl;
	
	// MAKE THE INPUT STRING UNIQUE
	string s_unique = s;
	string::iterator it = unique(s_unique.begin(), s_unique.end());
	s_unique.resize(distance(s_unique.begin(), it));
	cout << "Unique string: " << s_unique << endl;
	
	// COUNT THE NUMBER OF INSTANCES OF EACH CHARACTER
	vector<int> charCounts;
	cout << "Unique character count: ";
	for (int i = 0; i < s_unique.size(); i++) {
		int currCount = 0;
		for (int j = 0; j < s.size(); j++) {
			if (s_unique[i] == s[j]) {
				currCount++;
			}
		}
		charCounts.push_back(currCount);
		cout << currCount << " / ";
	}
	cout << endl;
	
	// SORT THE COUNTS OF INSTANCES OF EACH CHARACTER
	sort(charCounts.begin(), charCounts.end());
	
	// MAKE THE COUNTS OF INSTANCES OF EACH CHARACTER UNIQUE
	vector<int> uniqueCharCounts = charCounts; 
	sort(uniqueCharCounts.begin(), uniqueCharCounts.end());
	vector<int>::iterator it1 = unique(uniqueCharCounts.begin(), uniqueCharCounts.end());
	uniqueCharCounts.resize(distance(uniqueCharCounts.begin(), it1));
	
	string result;
	if (uniqueCharCounts.size() == 1) {
		// IF THERE IS ONLY ONE UNIQUE COUNT, THIS MEANS ALL CHARACTER HAVE THE SAME COUNT.
		// THUS, THE INPUT STRING IS VALID.
		result = "YES";
	} else if (uniqueCharCounts.size() > 2) {
		// IF THERE ARE MORE THAN 2 UNIQUE COUNTS, THE INPUIT STRING CANNOT POSSIBLE BE
		// VALID BECAUSE WE CAN ONLY REMOVE 1 CHARACTER.
		result = "NO";
	} else {
		
		int minCount = *min_element(charCounts.begin(), charCounts.end());
		int countZeros = 0;
		int countOnes = 0;
		for (int i = 0; i < charCounts.size(); i++)  {
			charCounts[i] -= minCount;
			if (charCounts[i] == 0) {
				countZeros++;
			} else if (charCounts[i] == 1) {
				countOnes++;
			}
		}
		if (countZeros == 1 || countOnes == 1) {
			result = "YES";
		} else {
			result = "NO";
		}
		
	}
	
	return result;

}

int main()
{
    ofstream fout(getenv("OUTPUT_PATH"));

    string s;
    getline(cin, s);

    string result = isValid(s);

    fout << result << "\n";

    fout.close();

    return 0;
}
