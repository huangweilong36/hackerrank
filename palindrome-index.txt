// https://www.hackerrank.com/challenges/palindrome-index/problem

#include <bits/stdc++.h>

using namespace std;

bool isPalindrome(string strInput) {
	
	// CANNOT USE RECURSIVE FUNCTION AS THE PROGRAM WILL RUN
	// OUT OF MEMORY
	
	bool output = true;
	int i_len = strInput.size() - 1;
	int i_max = strInput.size() / 2;
	int i = 0;
	
	while (output && i <= i_max) {
		if (strInput[i] != strInput[i_len - i]) {
			output = false;
		}
		i++;
	}
	
	return output;
	
}

int findMisMatch(string strInput) {
	
	// CANNOT USE RECURSIVE FUNCTION AS THE PROGRAM WILL RUN
	// OUT OF MEMORY
	
	bool found = false;
	int output;
	int i_len = strInput.size() - 1;
	int i_max = strInput.size() / 2;
	int i = 0;
	
	while (!found && i <= i_max) {
		if (strInput[i] != strInput[i_len - i]) {
			found = true;
			output = i;
		}
		i++;
	}
	
	return output;
	
}

// Complete the palindromeIndex function below.
int palindromeIndex(string s) {
	
	//cout << "Current string: " << s << "\n";
	
	int s_last_i = s.size() - 1;
	int output;
	
	if (isPalindrome(s)) {
		//cout << "Already a palindrome.\n";
		output = -1;
	} else {
		
		int i_left_err = findMisMatch(s);
		int i_right_err = s_last_i - i_left_err;
		string s_try1 = s;
		string s_try2 = s;
		s_try1.erase(i_left_err, 1);
		s_try2.erase(i_right_err, 1);
		
		//cout << "Mis-match at " << i_left_err << " and " << i_right_err << ".\n";
		
		if (isPalindrome(s_try1)) {
			output = i_left_err;
		} else if (isPalindrome(s_try2)) {
			output = i_right_err;		
		} else {
			//cout << "Not possible.\n";
			output = -1;
		}
		
	}
	
	return output;

}

int main()
{
    ofstream fout(getenv("OUTPUT_PATH"));

    int q;
    cin >> q;
    cin.ignore(numeric_limits<streamsize>::max(), '\n');

    for (int q_itr = 0; q_itr < q; q_itr++) {
        string s;
        getline(cin, s);

        int result = palindromeIndex(s);

        fout << result << "\n";
    }

    fout.close();

    return 0;
}
