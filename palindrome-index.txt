// https://www.hackerrank.com/challenges/palindrome-index/problem

#include <bits/stdc++.h>

using namespace std;

bool isPalindrome(string strInput, int i_start, int i_end) {
	
	// RECURSIVE FUNCTION TO CHECK IF THE INPUT STRING IS 
	// A PALINDROME.
	
	if (i_start >= i_end) {
		return true;
	} else {
		
		if (strInput[i_start] == strInput[i_end]) {
			return isPalindrome(strInput, i_start+1, i_end-1);
		} else {
			return false;
		}
		
	}
	
}

int findMisMatch(string strInput, int i_start, int i_end) {
	
	// FIND THE FIRST CHARACTER PALINDROME MIS-MATCH FROM THE
	// LEFT.
	
	if (strInput[i_start] == strInput[i_end]) {
		return findMisMatch(strInput, i_start+1, i_end-1);
	} else {
		return i_start;
	}
	
}

string removeChar(string strInput, int i) {
	
	// REMOVE A CHARACTER FROM THE INPUT STRING.
	
	string leftString = "";
	string rightString = "";
	
	if (i == 0) {
		rightString = strInput.substr(i+1, strInput.size()-1);
	} else if (i == (strInput.size()-1)) {
		leftString = strInput.substr(0, strInput.size()-1);
	} else {
		leftString = strInput.substr(0, i);
		rightString = strInput.substr(i+1, strInput.size()-1-i);
	}
	
	return leftString + rightString;
	
}

// Complete the palindromeIndex function below.
int palindromeIndex(string s) {
	
	// cout << "Current string: " << s << "\n";
	
	int s_last_i = s.size() - 1;
	int output;
	
	if (isPalindrome(s,0,s_last_i)) {
		// cout << "Already a palindrome.\n";
		output = -1;
	} else {
		
		int i_left_err = findMisMatch(s, 0, s_last_i);
		int i_right_err = s_last_i - i_left_err;
		// cout << "Mis-match at " << i_left_err << " and " << i_right_err << ".\n";
		
		if (isPalindrome(removeChar(s, i_left_err), 0, s_last_i-1)) {
			output = i_left_err;
		} else if (isPalindrome(removeChar(s, i_right_err), 0, s_last_i-1)) {
			output = i_right_err;		
		} else {
			// cout << "Not possible.\n";
			output = -1;
		}
		
	}
	
	return output;

}

int main()
{
    ofstream fout(getenv("OUTPUT_PATH"));

    int q;
    cin >> q;
    cin.ignore(numeric_limits<streamsize>::max(), '\n');

    for (int q_itr = 0; q_itr < q; q_itr++) {
        string s;
        getline(cin, s);

        int result = palindromeIndex(s);

        fout << result << "\n";
    }

    fout.close();

    return 0;
}
