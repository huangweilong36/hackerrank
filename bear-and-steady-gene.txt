// https://www.hackerrank.com/challenges/bear-and-steady-gene/problem

#include <bits/stdc++.h>

using namespace std;

// Complete the steadyGene function below.
int steadyGene(string gene) {
	
	// COUNT EACH CHARACTER IN THE ENTIRE GENE.
	int countIdeal = gene.size() / 4;
	int countA = count(gene.begin(), gene.end(), 'A');
	int countC = count(gene.begin(), gene.end(), 'C');
	int countT = count(gene.begin(), gene.end(), 'T');
	int countG = count(gene.begin(), gene.end(), 'G');
	
	// COUNT THE NUMBER OF ADDITION OF EACH CHARACTER TO MAKE THE GENE IDEAL.
	// A NEGATIVE VALUE SIGNIFIES THE NUMBER OF CHARACTERS TO BE REMOVED.
	int addA = countIdeal - countA;
	int addC = countIdeal - countC;
	int addT = countIdeal - countT;
	int addG = countIdeal - countG;
	int removeA = countA - countIdeal;
	int removeC = countC - countIdeal;
	int removeT = countT - countIdeal;
	int removeG = countG - countIdeal;
	
	// CALCULATE THE MINIMUM LENGTH OF THE STRING TO BE REPLACED.
	int minLength = ((addA > 0) ? addA : 0) +
					((addC > 0) ? addC : 0) +
					((addT > 0) ? addT : 0) +
					((addG > 0) ? addG : 0);
	
	int output = gene.length();
	
	// IF THE GENE IS ALREADY IDEAL, EXIT THE FUNCTION.
	// OTHERWISE, PERFORM THE FOLLOWING CHECKS.
	if (minLength != 0) { 
		
		int i = 0;
		int j = 0;
		
		int tempCountA = 0;
		int tempCountC = 0;
		int tempCountT = 0;
		int tempCountG = 0;
		char addedRightChar = gene[0];
		char removedLeftChar;
		
		// INITIALIZE
		if (addedRightChar == 'A') {
			tempCountA++;
		} else if (addedRightChar == 'C') {
			tempCountC++;
		} else if (addedRightChar == 'T') {
			tempCountT++;
		} else if (addedRightChar == 'G') {
			tempCountG++;
		}

		while (j < gene.length()) {
			
			/*
			// DEBUG
			cout << "Current solution: " << i << ", " << j << ". Current counts: " << 
						tempCountA << ", " << 
						tempCountC << ", " <<		
						tempCountT << ", " <<
						tempCountG << endl;
			*/
			
			// IF A VALID SOLUTION IS FOUND, ...
			if (removeA <= tempCountA && 
						removeC <= tempCountC && 
						removeT <= tempCountT && 
						removeG <= tempCountG) {
				
				cout << "Valid Solution: " << i << ", " << j << endl;
				
				// REMEMBER THE BEST SOLUTION
				if (output > (j - i + 1)) {
					output = (j - i + 1);
				}
				
				// TRY TO FIND A SHORTER SOLUTION BY REMOVING THE LEFT-MOST CHARACTER
				i++;
				removedLeftChar = gene[i-1];
				if (removedLeftChar == 'A') {
					tempCountA--;
				} else if (removedLeftChar == 'C') {
					tempCountC--;
				} else if (removedLeftChar == 'T') {
					tempCountT--;
				} else if (removedLeftChar == 'G') {
					tempCountG--;
				}
				
			} else {
				
				// TRY TO FIND A LONGER SOLUTION BUT VALID BY ADDING THE RIGHT-MOST CHARACTER
				j++;
				addedRightChar = gene[j];
				if (addedRightChar == 'A') {
					tempCountA++;
				} else if (addedRightChar == 'C') {
					tempCountC++;
				} else if (addedRightChar == 'T') {
					tempCountT++;
				} else if (addedRightChar == 'G') {
					tempCountG++;
				}
				
			}
			
		
		}
		
	}
	
	if (minLength == 0) {
		return 0;
	} else { 
		return output;
	}
}

int main()
{
    ofstream fout(getenv("OUTPUT_PATH"));

    int n;
    cin >> n;
    cin.ignore(numeric_limits<streamsize>::max(), '\n');

    string gene;
    getline(cin, gene);

    int result = steadyGene(gene);

    fout << result << "\n";

    fout.close();

    return 0;
}
